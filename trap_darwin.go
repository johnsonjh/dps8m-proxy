//go:build darwin

///////////////////////////////////////////////////////////////////////////////////////////////////
// DPS8M Proxy - trap_darwin.go
// Copyright (c) 2025 Jeffrey H. Johnson
// Copyright (c) 2025 The DPS8M Development Team
// SPDX-License-Identifier: MIT
// scspell-id: 9af38160-b277-11f0-8326-80ee73e9b8e7
///////////////////////////////////////////////////////////////////////////////////////////////////

// DPS8M Proxy
//
//nolint:godoclint,nolintlint
package main

///////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"os"
	"regexp"
	"strings"

	"golang.org/x/sys/unix"
)

///////////////////////////////////////////////////////////////////////////////////////////////////

var terminal = regexp.MustCompile(`.*term.*|^warp|^hyper`)

///////////////////////////////////////////////////////////////////////////////////////////////////

func getParentProcInfo() (string, int32, error) {
	ppid := os.Getppid()

	parentInfo, err := unix.SysctlKinfoProc("kern.proc.pid", ppid)
	if err != nil {
		return "", 0, err
	}

	var commBytes []byte

	for _, b := range parentInfo.Proc.P_comm {
		if b == 0 {
			break
		}

		commBytes = append(commBytes, byte(b))
	}

	parentName := string(commBytes)

	gppid := parentInfo.Eproc.Ppid

	return parentName, gppid, nil
}

///////////////////////////////////////////////////////////////////////////////////////////////////

func guiLaunched() bool {
	parentName, gppid, err := getParentProcInfo()
	if err != nil {
		return false
	}

	lowerParentName := strings.ToLower(parentName)

	if terminal.MatchString(lowerParentName) {
		return gppid == 1
	}

	return false
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// vim: set ft=go noexpandtab tabstop=4 cc=100 :
///////////////////////////////////////////////////////////////////////////////////////////////////
