<!-- Copyright (c) 2025 Jeffrey H. Johnson -->
<!-- Copyright (c) 2025 The DPS8M Development Team -->
<!-- SPDX-License-Identifier: MIT -->
<!-- vim: set ft=markdown expandtab cc=72 : -->
<!-- NB: Do not modify README.md directly; modify README.md.tmpl -->
# dps8m-proxy

[![Go Report Card](https://goreportcard.com/badge/gitlab.com/dps8m/proxy)](https://goreportcard.com/report/gitlab.com/dps8m/proxy)

## Overview

The **`proxy`** (or **`dps8m-proxy`**) program acts as a multi-user
*terminal server* and proxy, accepting incoming **SSH** connections on
the front-end and relaying (*or proxying*) these connections to one or
more **TELNET** connections on the back-end.

Although this project was originally developed to meet the needs of
the **BAN.AI Public Access Multics** system and the
[DPS8M Simulator](https://dps8m.gitlab.io) projects, it may be useful
to anyone who wants to provide SSH access to legacy systems.

## Features

* ✅ **SSH**⟷**TELNET** gateway
* ✅ Full IPv6 support
* ✅ Access control whitelist/blacklist (by IP address or CIDR block)
* ✅ Independent console and session logging (by date/time and host)
* ✅ Automatic logfile compression (gzip, xz, zstandard)
* ✅ Banners for accepted, denied, and blocked connections (per target)
* ✅ Session connection monitoring and idle time tracking (with optional timeouts)
* ✅ Interactive connection management for administrators
* ✅ User access to **TELNET** features (*e.g.*, line BREAK, AYT) and statistics
* ✅ Link filtering
* ✅ Transparent key remapping mode (translating movement keys to Emacs sequences)
* ✅ Live streaming connection sharing (read-only)
  * 🤝 Allows users to share their session with one or more viewers

## Usage

### Installation

* The software can be installed using `go install`:

  ```sh
  go install gitlab.com/dps8m/proxy@latest
  ```
  * This will download the needed source, compile, and install the
    binary to `${GOEXE}/bin/proxy` (which will be
    `${HOME}/go/bin/proxy` for most users).

* You can also clone the
  [`git` repository](https://gitlab.com/dps8m/proxy.git) and build
  the source code with `make`:

  ```sh
  git clone https://gitlab.com/dps8m/proxy.git
  cd proxy
  make
  ```

### Invocation

* The proxy can be invoked with the following command-line arguments:

```
===HELP===
```

#### Version

The `-v` or `--version` command shows detailed version information,
including the versions of all embedded dependencies and the version
of the Go compiler used to build the software:

```
===VERSION===
```

If you need to see even more details, use `go version -m proxy`.

### Port binding

* If you want to listen on the regular SSH port of 22 (without
  running as `root`, which is strongly discouraged) on Linux systems
  you can use `setcap` to allow the proxy to bind to low ports:

  ```sh
  sudo setcap 'cap_net_bind_service=+ep' "/path/to/proxy"
  ```

### Admin interaction

* The running proxy can be controlled with the following console
  commands:
  * `?` - Show help text
  * `c` - Show proxy configuration
  * `v` - Show version details
  * `l` - List active connections
  * `k` - Kill connection
  * `d` - Deny new connections
  * `r` - Reload access control lists
  * `q` - Graceful shutdown
  * `Q` - Immediate shutdown (also via `^C`)
[]()

[]()
* NOTE: When the *Deny new connections* mode is active, any logging
  of new *denied* connections is suppressed.  This makes the `d` mode
  very helpful to temporarily enable if you watching the console log
  files or trying to use the admin console to kill connections.

### Signals

* The proxy also acts on the following signals:
  * `SIGINT`, `SIGQUIT` - enables the *Immediate shutdown* mode
  * `SIGUSR1` - enables the *Graceful shutdown* mode
  * `SIGUSR2` - enables the *Deny new connections* mode
  * `SIGHUP` - reloads *access control lists*
    (`-whitelist`, `-blacklist`)

### User interaction

Users connected via SSH can send `^]` (*i.e.* `Control + ]`) during
a session to access the following following features from a menu:

* `A` sends an IAC `AYT` (*Are You There?*) to the remote host
* `B` sends an IAC `BREAK` signal to the remote host
* `K` toggles the transparent key remapping mode, which translates
  modern `xterm`/`VT320` movement key inputs to Emacs sequences:
  |             Input | Output        |
  |------------------:|:--------------|
  | `Control + Up`    | `Escape, [`   |
  | `Control + Down`  | `Escape, ]`   |
  | `Control + Right` | `Escape, f`   |
  | `Control + Left`  | `Escape, b`   |
  | `Home`            | `Control + A` |
  | `Delete`          | `Control + D` |
  | `End`             | `Control + E` |
  | `Up`              | `Escape + v`  |
  | `Down`            | `Control + V` |
  | `Up`              | `Control + P` |
  | `Down`            | `Control + N` |
  | `Right`           | `Control + F` |
  | `Left`            | `Control + B` |
* `N` sends an IAC `NOP` (*No Operation*) to the remote host
* `S` displays the status the session and some statistics:
  ```
  >> LNK - The username '_gRSyWHxPcMp2MWvtmWWF' can be used to share this session.
  >> SSH - in:   58 B,   out: 4.82 KiB, in rate:   4 B/s, out rate: 381 B/s
  >> NVT - in: 4.82 KiB, out:   57 B,   in rate: 381 B/s, out rate:   4 B/s
  >> LNK - link time: 13s (Emacs keymap enabled)
  ```
* `X` disconnects from the remote host (and ends the SSH session)

### Connection sharing

* The user can share the username presented above with others,
  allowing the session to be viewed live (read-only) by one or more
  viewers:

  ```sh
  $ ssh _gRSyWHxPcMp2MWvtmWWF@proxybox

  CONNECTION from remote.com [18.17.16.15] started at 2025/07/15 08:22:55.
  This is a READ-ONLY shared monitoring session.
  Send Control-] to disconnect.
  ```

## History

This is a from-scratch re-implementation using
[Golang](https://go.dev/) of an older legacy program of the same name.
The original software used a multi-process architecture and consisted
of more than 10,000 SLOC of haphazardly constructed code: ≅9,000 lines
of [C-Kermit](https://www.kermitproject.org/) (*yes, the
[programming language](https://www.kermitproject.org/ckututor.html)*)
and [ksh93](https://github.com/ksh93/ksh), with a small amounts of C
and Perl, which was difficult to maintain, configure, or securely
install.

The new implementation uses lightweight *Goroutines* in place of
spawning multiple processes, resulting in significantly improved
performance and reduced system overhead.

## Future plans

Some features are still missing in this implementation and will be
added in future updates:

* The original legacy software had features not yet re-implemented
  like *CAPTCHA*s, throttling, load-balancing, and flow control.

## Compressed logs

By default, all session log files are compressed automatically when
the session terminates, and console log files are compressed when the
log rolls over (starting a new day).  When reviewing logs,
administrators often need to grep through all the past data, including
the compressed files. We recommend using
[`ripgrep`](https://github.com/BurntSushi/ripgrep) (with the `-z`
option) for this task.

## Using OpenSSH host keys

If you have existing [OpenSSH](https://www.openssh.com/) Ed25519 or
RSA host keys that you want to use with the proxy, you’ll need to
convert those keys to standard PEM format. **NB**: These instructions
*do not* include specific instructions for safe handling of key file
permissions—we assume you know what you’re doing!

1. Make a *copy* the key files you wish to convert.  Be aware that
   these copies will be *overwritten* in the conversion process:

   ```sh
   cp /etc/ssh/ssh_host_rsa_key ssh_host_rsa_key.tmp
   cp /etc/ssh/ssh_host_ed25519_key ssh_host_ed25519_key.tmp
   ```

2. Convert the keys (using `ssh-keygen`) and rename them appropriately:

   ```sh
   ssh-keygen -p -m PEM -N '' -P '' -f ssh_host_rsa_key.tmp
   ssh-keygen -p -m PEM -N '' -P '' -f ssh_host_ed25519_key.tmp
   mv ssh_host_rsa_key.tmp ssh_host_rsa_key.pem
   mv ssh_host_ed25519_key.tmp ssh_host_ed25519_key.pem 
   ```
## Security

* The canonical home of this software is
  \<[**https://gitlab.com/dps8m/proxy**](https://gitlab.com/dps8m/proxy)\>.
* This software is intended to be **secure**.  If you find any
  security-related problems, please do not hesitate to
  [open an Issue](https://gitlab.com/dps8m/proxy/-/issues/new)
  or send an [e-mail](mailto:contact-project+dps8m-proxy-71601954-issue-@incoming.gitlab.com)
  to the author.

## License

* The `proxy` program is made available under the terms of the
  [MIT License](https://opensource.org/license/mit), with some bundled
  example and miscellaneous files distributed under the terms of the
  [MIT No Attribution License](https://opensource.org/license/mit-0).
