//go:build linux || android

///////////////////////////////////////////////////////////////////////////////////////////////////
// DPS8M Proxy - capability_linux.go
// Copyright (c) 2025 Jeffrey H. Johnson
// Copyright (c) 2025 The DPS8M Development Team
// SPDX-License-Identifier: MIT
// scspell-id: 61bf5b0e-6bd1-11f0-8085-80ee73e9b8e7
///////////////////////////////////////////////////////////////////////////////////////////////////

// DPS8M Proxy
//
//nolint:godoclint,nolintlint
package main

///////////////////////////////////////////////////////////////////////////////////////////////////

import (
	"log"
	"os"
	"sync"

	"kernel.org/pub/linux/libs/security/libcap/cap"
)

///////////////////////////////////////////////////////////////////////////////////////////////////

var oneTime sync.Once

///////////////////////////////////////////////////////////////////////////////////////////////////

func showCapabilityMessage(exePath string) {
	oneTime.Do(func() {
		log.Printf("%sCAP_NET_BIND_SERVICE is required to bind privileged (<1024) ports\r\n",
			warnPrefix())
		log.Printf("%sFix: sudo setcap 'cap_net_bind_service+ep' %q\r\n",
			toolPrefix(), exePath)
	})
}

///////////////////////////////////////////////////////////////////////////////////////////////////

func checkCapability() {
	hasBindCap := false

	cv, err := cap.FromName("cap_net_bind_service")
	if err == nil {
		hasBindCap, _ = cap.GetProc().GetFlag(cap.Effective, cv)
	}

	exePath := resolveExePath()

	if !hasBindCap && os.Getuid() != 0 {
		showCapabilityMessage(exePath)
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////
// vim: set ft=go noexpandtab tabstop=4 cc=100 :
///////////////////////////////////////////////////////////////////////////////////////////////////
